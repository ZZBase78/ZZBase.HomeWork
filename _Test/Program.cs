using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace _Test
{

    // Класс и структура по сути это набор данных, который объединяет в себе поля и методы
    // просто у класса более широкий функционал, который мы пока не проходили

    // Пример структуры
    struct MyStruct
    {
        public string name; // строковое поле для хранения имени
        public int year; // числовое поле для хранения года рождения

        public int GetAge() // пример метода который возвращает возвраст. Имя метода любое
        {
            return 2021 - year;
        }
        public override string ToString() // специальные метод для вывода структуры на экран, имя ToString() - специальное
        {
            //Используется для того, чтобы показать как будет выводится в консоль объект,
            //если кто-то заходет его вывести, через Console.WriteLine(<переменная>);
            return $"{name} - {year}";
        }
    }

    // Пример класса. Все то же самое
    class MyClass
    {
        public string name; // строковое поле для хранения имени
        public int year; // числовое поле для хранения года рождения

        public int GetAge() // пример метода который возвращает возвраст. Имя метода любое
        {
            //чтобы вычислить данное выражение, должна быть известна переменная year, которая есть у конкретного экземпляра
            //следовательно без экземпляра, данный метод выполнить нельзя
            //поэтому данный метод обычный (не статический)
            return 2021 - year; 
        }

        public static int GetAge(MyClass cl)
        {
            //для вычисления этого выражения, все что нужно знать методу, передается в параметре cl,
            //а в переменной cl уже внутри есть поле year
            //остальное методу знать не нужно
            //поэтому данный метод можно сделать статическим
            return 2021 - cl.year;
        }
        public override string ToString() // специальные метод для вывода структуры на экран, имя ToString() - специальное
        {
            return $"{name} - {year}";
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            MyStruct s; // Объявляем свою переменную s с типом нашей структуры

            // т.к. у поля стоит "public", то мы можем присвоить ему значение находясь в другом классе, т.е. как сейчас в program
            // если бы public не было, то была бы ошибка
            // также чтобы начать работать со структурой мы в обязательном порядке должны присвоить значения всем полям структуры
            s.name = "Иван"; // присваиваем значение полю name
            s.year = 2000; // присваиваем значение полю year

            int age = s.GetAge(); // метод тоже имеет "public" и тоже мы можем к нему обращаться будучи в другом классе
            Console.WriteLine($"{s} - Возраст {age}"); // Выводит: Иван - 2000 - Возвраст 21

            Console.ReadLine();


            // с классом, чуть-чуть отличается инициализации переменной

            MyClass c; // Объявляем переменную, но сам класс еще не создан

            c = new MyClass(); // инициализируем переменную новым экземпляром класса

            // далее как и со структурой

            c.name = "Иван"; // присваиваем значение полю name
            c.year = 2000; // присваиваем значение полю year

            int age2 = c.GetAge(); // метод тоже имеет "public" и тоже мы можем к нему обращаться будучи в другом классе
            Console.WriteLine($"{c} - Возраст {age2}"); // Выводит: Иван - 2000 - Возвраст 21

            Console.ReadLine();

            // отвлечемся от структуры и класса
            // как объявляются и инициализируются переменные
            
            // 1 способ
            int a; // просто объявляем переменную типа int, но значения в ней пока нет
            a = 100; //присваиваем значение 100 для ранее объявленной переменной
            
            //2 способ
            int b = 50; //сразу объявляем переенную типа int и сразу присваиваем значение 50

            //Всегда в программе, когда переменная появляется в первый раз она должна быть объявлена с указанием типа
            

            // немного другой способ работы со структурой

            MyStruct s3 = new MyStruct(); // объявляем переменную и сразу инициализируем поля структуры (значениями по умолчанию)

            //Значения по умолчанию
            // "" - пустая строка для строковых переменных
            // 0 - для числовых переменных

            //специально не присваиваю полям свои значения чтобы проверить как все будет работать с значениями полей по умолчанию
            int age3 = s3.GetAge(); // 2021 - 0(year по умолчанию)
            Console.WriteLine($"{s3} - Возраст {age3}"); // Выводит:  - 0 - Возвраст 2021
            Console.ReadLine();


            // теперь что касается статических методов и нестатических
            // это понятие есть только у классов, у структур такого понятия нет

            // суть в том, что для статических полей и методов не нужно создавать экземпляр класса,
            // т.е. статические поля и методы принадлежат всем классу в целом

            // а не статические поля и методы принадлежат конкретному экземпляру

            // пример

            MyClass c3 = new MyClass(); // создадим c3 - экземпляр класса
            MyClass c4 = new MyClass(); // создадим c4 - экземпляр класса

            // в каждом из этих экземпляров, свои поля name и year;
            c3.name = "Иван";
            c3.year = 2000;
            c4.name = "Федор";
            c4.year = 2005;

            Console.WriteLine($"c3 = {c3}"); // выводит с3 = Иван - 2000
            Console.WriteLine($"c4 = {c4}"); // выводит с4 = Федор - 2005
            Console.ReadLine();

            // вызов нестатического метода GetAge()
            // вызывается для каждого экземпляра отдельно

            int age5 = c3.GetAge(); // age5 = 21
            int age6 = c4.GetAge(); // age6 = 16

            //т.е. для выполнения метода необходим экземпляр класса, а потом через точку имя метода

            //Пример работы со статикой
            MyClass c6= new MyClass(); // создадим c6 - экземпляр класса
            c6.name = "Николай";
            c6.year = 2002;

            int age10 = c6.GetAge(); // вызов обычного метода

            // вызов статического метода делается от имени класса, далее через точку имя статического метода
            int age11 = MyClass.GetAge(c6); // ну и параметр обязательно, т.к. для метода он необходим (мы так написали выше)

            //Т.к. статический метод работает как бы сам по себе
            //и все что ему нужно передается в параметры
            //то в принципе данный метод можно запихнуть в любой класс и никто не пострадает
            //просто принято внутри класса все описывается относящееся к данному классу

            // пример большого статического класса например класс Math
            // в этом классе собраны все математические функции и все что этим функциям нужно передается в параметры

            //пример использоваие класса math
            double cosx = Math.Cos(1.1); 
            Console.WriteLine($"cosx = {cosx}"); // выводит: cosx = 0,453596121425577
            Console.ReadLine();

        }
    }
}
